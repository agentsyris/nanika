from fastapi import FastAPI, Response
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import os
import redis
import json
import pathlib
import datetime
import uuid

app = FastAPI(title="nanika.api")
r = redis.Redis.from_url(os.environ.get("REDIS_URL", "redis://localhost:6379/0"))

# Paths
ART_DIR = pathlib.Path("/app/artifacts")

class Task(BaseModel):
    intent: str
    instruction: str
    context: dict = {}
    request_id: str = None

@app.get("/", response_class=HTMLResponse)
def home():
    """Serve the UI with Nanika aesthetics"""
    html_content = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>nanika ‚Äî „ÅÇ„ÅÑ</title>
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @keyframes phase {
            0%, 100% { opacity: 0; transform: scale(0.95); }
            50% { opacity: 1; transform: scale(1); }
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        .nanika-face {
            animation: phase 3s ease-in-out infinite;
        }
        
        .floating {
            animation: float 4s ease-in-out infinite;
        }
        
        .void-eyes {
            background: radial-gradient(ellipse at center, #000000 40%, #1a0033 100%);
            box-shadow: inset 0 0 20px #000, 0 0 30px #8b00ff;
        }
        
        body {
            background: #050505;
            background-image: 
                radial-gradient(ellipse at top left, #1a0033 0%, transparent 50%),
                radial-gradient(ellipse at bottom right, #0d001a 0%, transparent 50%);
        }
    </style>
</head>
<body>
    <div id="root"></div>
    <script type="text/babel">
        const { useState, useEffect, useRef } = React;

        function NanikaChat() {
            const [messages, setMessages] = useState([]);
            const [input, setInput] = useState("");
            const [loading, setLoading] = useState(false);
            const [intent, setIntent] = useState("chat");
            const [showNanika, setShowNanika] = useState(false);
            
            const sendMessage = async () => {
                if (!input.trim() || loading) return;
                
                // Generate request ID
                const reqId = Date.now().toString();
                
                // Add user message
                const userMsg = { role: "you", text: input, at: new Date().toISOString() };
                setMessages(prev => [...prev, userMsg]);
                
                // Build conversation history
                const history = messages.slice(-12).reduce((acc, msg, i) => {
                    if (msg.role === "you" && messages[i + 1]?.role === "nanika") {
                        acc.push({
                            user: msg.text,
                            assistant: messages[i + 1].text
                        });
                    }
                    return acc;
                }, []);
                
                const instruction = input;
                setInput("");
                setLoading(true);
                setShowNanika(true);  // Show Nanika face while thinking
                
                try {
                    const response = await fetch("/task", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            intent: intent,
                            instruction: intent === "chat" ? 
                                `user said: ${instruction}` : 
                                instruction,
                            context: { 
                                history: history,
                                request_id: reqId 
                            },
                            request_id: reqId
                        })
                    });
                    
                    if (!response.ok) throw new Error("Failed to send");
                    
                    // Poll for response
                    let attempts = 0;
                    const pollForResponse = async () => {
                        if (attempts > 20) {
                            setLoading(false);
                            setShowNanika(false);
                            return;
                        }
                        
                        try {
                            const latest = await fetch(`/response/${reqId}`);
                            const data = await latest.json();
                            
                            if (data.text) {
                                // Add a small "ai" acknowledgment first
                                setMessages(prev => [...prev, {
                                    role: "nanika",
                                    text: data.text,
                                    at: new Date().toISOString()
                                }]);
                                setLoading(false);
                                setShowNanika(false);
                            } else {
                                attempts++;
                                setTimeout(pollForResponse, 500);
                            }
                        } catch (e) {
                            attempts++;
                            setTimeout(pollForResponse, 500);
                        }
                    };
                    
                    setTimeout(pollForResponse, 2000);
                    
                } catch (error) {
                    console.error("Error:", error);
                    setLoading(false);
                    setShowNanika(false);
                }
            };
            
            return (
                <div className="min-h-screen text-gray-200 flex flex-col relative">
                    {/* Nanika Face Overlay */}
                    {showNanika && (
                        <div className="fixed inset-0 flex items-center justify-center pointer-events-none z-50">
                            <div className="nanika-face">
                                <div className="relative">
                                    {/* Face */}
                                    <div className="w-48 h-48 bg-gray-100 rounded-full relative">
                                        {/* Headband with expressions */}
                                        <div className="absolute top-4 left-0 right-0 h-12 bg-purple-300 flex items-center justify-center">
                                            <div className="flex gap-2 text-2xl">
                                                <span>üò∂</span>
                                                <span>üò£</span>
                                                <span>üòî</span>
                                                <span>üòä</span>
                                            </div>
                                        </div>
                                        {/* Eyes */}
                                        <div className="absolute top-20 left-12 right-12 flex justify-between">
                                            <div className="w-12 h-16 void-eyes rounded-full"></div>
                                            <div className="w-12 h-16 void-eyes rounded-full"></div>
                                        </div>
                                        {/* Mouth */}
                                        <div className="absolute bottom-12 left-1/2 transform -translate-x-1/2">
                                            <div className="w-16 h-1 bg-black rounded-full"></div>
                                        </div>
                                    </div>
                                    {/* Hair */}
                                    <div className="absolute -top-4 -left-8 -right-8 h-32 bg-gradient-to-b from-purple-950 to-transparent rounded-t-full opacity-80"></div>
                                </div>
                                <div className="text-center mt-4 text-purple-400 text-sm">„ÅÇ„ÅÑ</div>
                            </div>
                        </div>
                    )}
                    
                    {/* Header */}
                    <header className="border-b border-purple-900/30 p-4 backdrop-blur-sm">
                        <div className="max-w-4xl mx-auto flex items-center justify-between">
                            <div>
                                <h1 className="text-xl font-mono lowercase">nanika</h1>
                                <div className="text-xs text-purple-400">the quiet universe ¬∑ „ÅÇ„ÅÑ</div>
                            </div>
                            <div className="flex gap-4 text-sm">
                                <select 
                                    value={intent} 
                                    onChange={e => setIntent(e.target.value)}
                                    className="bg-black/50 border border-purple-900/50 rounded px-2 py-1"
                                >
                                    <option value="chat">chat</option>
                                    <option value="plan">plan</option>
                                    <option value="research">research</option>
                                    <option value="build">build</option>
                                </select>
                            </div>
                        </div>
                    </header>
                    
                    {/* Messages */}
                    <div className="flex-1 max-w-4xl mx-auto w-full p-4 space-y-4 overflow-auto">
                        {messages.length === 0 && (
                            <div className="text-purple-600 text-center mt-20 floating">
                                <div className="text-6xl mb-4">üëÅÔ∏è‚Äçüó®Ô∏è</div>
                                <div>make a wish...</div>
                            </div>
                        )}
                        {messages.map((msg, i) => (
                            <div key={i} className={`p-4 rounded-lg backdrop-blur-sm ${
                                msg.role === "you" 
                                    ? "bg-black/50 border border-gray-800" 
                                    : "bg-purple-950/20 border border-purple-900/50 shadow-lg shadow-purple-900/20"
                            }`}>
                                <div className="text-xs text-purple-400 mb-1">
                                    {msg.role === "nanika" ? "„ÅÇ„ÅÑ" : msg.role}
                                </div>
                                <div className="whitespace-pre-wrap">{msg.text}</div>
                            </div>
                        ))}
                        {loading && !showNanika && (
                            <div className="text-purple-400 text-sm animate-pulse">
                                processing wish...
                            </div>
                        )}
                    </div>
                    
                    {/* Input */}
                    <div className="border-t border-purple-900/30 p-4 backdrop-blur-sm">
                        <div className="max-w-4xl mx-auto flex gap-2">
                            <textarea
                                value={input}
                                onChange={e => setInput(e.target.value)}
                                onKeyDown={e => {
                                    if (e.key === "Enter" && (e.ctrlKey || e.metaKey)) {
                                        sendMessage();
                                    }
                                }}
                                placeholder="speak your wish... (Ctrl+Enter)"
                                className="flex-1 bg-black/50 border border-purple-900/50 rounded-lg p-3 resize-none backdrop-blur-sm"
                                rows={3}
                            />
                            <button
                                onClick={sendMessage}
                                disabled={loading || !input.trim()}
                                className="px-6 py-3 bg-purple-900/50 hover:bg-purple-800/50 disabled:bg-gray-900/50 rounded-lg transition-all backdrop-blur-sm border border-purple-900/50"
                            >
                                „ÅÇ„ÅÑ
                            </button>
                        </div>
                    </div>
                </div>
            );
        }

        ReactDOM.render(<NanikaChat />, document.getElementById("root"));
    </script>
</body>
</html>
    """
    return html_content

@app.get("/health")
def health():
    return {"status": "ok"}

@app.post("/task")
def task(t: Task):
    payload = t.model_dump()
    if not payload.get("request_id"):
        payload["request_id"] = str(uuid.uuid4())
    r.lpush("nanika:tasks", json.dumps(payload))
    return {"queued": True, "request_id": payload["request_id"]}

@app.get("/response/{request_id}")
def get_response(request_id: str):
    """Get response for a specific request"""
    response_key = f"nanika:response:{request_id}"
    response_data = r.get(response_key)
    
    if response_data:
        return json.loads(response_data)
    
    # Fallback to checking latest artifact
    today = ART_DIR / datetime.date.today().isoformat()
    if today.exists():
        files = sorted(today.glob("*.md"), key=lambda p: p.stat().st_mtime, reverse=True)
        if files:
            return {"text": files[0].read_text()}
    
    return {"text": "", "status": "pending"}

@app.get("/dashboard")
def dashboard():
    """Show today's generated work"""
    today = datetime.date.today().isoformat()
    artifacts_dir = ART_DIR / today
    
    if not artifacts_dir.exists():
        return {"message": "No artifacts yet today"}
    
    artifacts = []
    for f in sorted(artifacts_dir.glob("*.md")):
        artifacts.append({
            "name": f.stem,
            "created": datetime.datetime.fromtimestamp(f.stat().st_mtime).isoformat(),
            "preview": f.read_text()[:200] + "..."
        })
    
    return {
        "date": today,
        "artifacts_count": len(artifacts),
        "artifacts": artifacts
    }

@app.get("/dashboard", response_class=HTMLResponse)
def dashboard_html():
    """Serve the dashboard HTML"""
    dashboard_path = pathlib.Path("/app/dashboard.html")
    if dashboard_path.exists():
        return dashboard_path.read_text()
    return "<h1>Dashboard not found</h1>"

@app.get("/api/dashboard")
def dashboard_api():
    """API endpoint for dashboard data"""
    today = datetime.date.today().isoformat()
    artifacts_dir = ART_DIR / today
    
    artifacts = []
    if artifacts_dir.exists():
        for f in sorted(artifacts_dir.glob("*.md"), key=lambda x: x.stat().st_mtime, reverse=True):
            content = f.read_text()
            artifacts.append({
                "name": f.stem,
                "created": datetime.datetime.fromtimestamp(f.stat().st_mtime).isoformat(),
                "preview": content[:500] + "..." if len(content) > 500 else content,
                "size": len(content)
            })
    
    return {
        "date": today,
        "artifacts_count": len(artifacts),
        "artifacts": artifacts
    }

@app.get("/api/queue-status")
def queue_status():
    """Get current queue status"""
    queue_length = r.llen("nanika:tasks")
    return {"queue_length": queue_length}

@app.get("/api/artifact/{name}")
def get_artifact(name: str):
    """Get full artifact content"""
    today = datetime.date.today().isoformat()
    artifact_path = ART_DIR / today / f"{name}.md"
    
    if artifact_path.exists():
        return {"content": artifact_path.read_text()}
    return {"error": "Artifact not found"}, 404

@app.get("/dashboard", response_class=HTMLResponse)
def dashboard_html():
    """Serve the dashboard HTML"""
    dashboard_path = pathlib.Path("/app/dashboard.html")
    if dashboard_path.exists():
        return dashboard_path.read_text()
    return "<h1>Dashboard not found</h1>"

@app.get("/api/dashboard")
def dashboard_api():
    """API endpoint for dashboard data"""
    today = datetime.date.today().isoformat()
    artifacts_dir = ART_DIR / today
    
    artifacts = []
    if artifacts_dir.exists():
        for f in sorted(artifacts_dir.glob("*.md"), key=lambda x: x.stat().st_mtime, reverse=True):
            content = f.read_text()
            artifacts.append({
                "name": f.stem,
                "created": datetime.datetime.fromtimestamp(f.stat().st_mtime).isoformat(),
                "preview": content[:500] + "..." if len(content) > 500 else content,
                "size": len(content)
            })
    
    return {
        "date": today,
        "artifacts_count": len(artifacts),
        "artifacts": artifacts
    }

@app.get("/api/queue-status")
def queue_status():
    """Get current queue status"""
    queue_length = r.llen("nanika:tasks")
    return {"queue_length": queue_length}

@app.get("/api/artifact/{name}")
def get_artifact(name: str):
    """Get full artifact content"""
    today = datetime.date.today().isoformat()
    artifact_path = ART_DIR / today / f"{name}.md"
    
    if artifact_path.exists():
        return {"content": artifact_path.read_text()}
    return {"error": "Artifact not found"}, 404
